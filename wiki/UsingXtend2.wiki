#summary Describes the Xtend2 based version of the Roo-Equals-Addon

Implementing code generation in plain Java can be quite cumbersome, as you might notice when looking at [http://code.google.com/p/spring-roo-equals-roo-addon/source/browse/trunk/de.saxsys.roo.equals.addon/src/main/java/de/saxsys/roo/equals/addon/EqualsMetadata.java EqualsMetadata.java].

To show a nicer approach, we provide an [http://blog.efftinge.de/2010/12/xtend-2-successor-to-xpand.html Xtend2] based version of our addon [http://spring-roo-equals-roo-addon.googlecode.com/svn/branches/xtend2/ here].

The metadata and the metadata provider classes are still written in plain Java, but the code generation of the equals and hashCode method has been moved to [http://code.google.com/p/spring-roo-equals-roo-addon/source/browse/branches/xtend2/de.saxsys.roo.equals.addon/src/main/java/de/saxsys/roo/equals/addon/EqualsMethodBuilder.xtend EqualsMethodBuilder.xtend ].

_We have also added some helper classes (FakedBodyBuilder.java, Method.java, MethodSignature.java, Parameter.java ), but they are not specific to the addon and could be moved to some common library later._

The addon is provided via RooBot, so you can install it in Roo by:
{{{
addon install bundle --bundleSymbolicName de.saxsys.roo.equals.addon.xtend2
}}}

The addon has some additional dependencies, which will be installed, too: the Xbase and Xtend2 runtime libraries and Google collections. We provide them as Roo-compliant wrapped bundles in the [http://code.google.com/p/xtext4roo/source/browse/repo/repository.xml xtext4roo] bundle repository (OBR). To tell Apache Felix to search in this repository, we had to add the follwing line in the Equals-Addon [http://code.google.com/p/spring-roo-equals-roo-addon/source/browse/maven-repository/repository.xml repository]:
{{{
<referral depth="1" url="http://xtext4roo.googlecode.com/svn/repo/repository.xml"/>
}}}

If you want to play around with [http://code.google.com/p/spring-roo-equals-roo-addon/source/browse/branches/xtend2/de.saxsys.roo.equals.addon/src/main/java/de/saxsys/roo/equals/addon/EqualsMethodBuilder.xtend EqualsMethodBuilder.xtend ] or if you want to write your own Xtend2 based Roo addon, you need:

  * Eclipse Indigo (We used M7. You might also use an STS based on Eclipse Indigo. Even Helios might work, but we did not try)
  * Xtext 2.0, at least 2.0.0.v201103281003  (This is a nightly build. You can get it [http://www.eclipse.org/modeling/tmf/downloads/ here] )

Then, check out the addon from [http://spring-roo-equals-roo-addon.googlecode.com/svn/branches/xtend2/ here] and import it into Eclipse.  Make sure, the project has got the Xtext nature, otherwise the Java classes in [http://spring-roo-equals-roo-addon.googlecode.com/svn/branches/xtend2/de.saxsys.roo.equals.addon/xtend-gen xtend-gen] folder won't be updated when you edit the Xtend files.  (Xtend2 files are "compiled" to Java code. This is done by the Xtext project builder.)

If you want to write your own Xtend2 based Roo addon, you can at first create the addon as usual by 

{{{
addon create advanced ...
}}}

Then, have a look at our [http://code.google.com/p/spring-roo-equals-roo-addon/source/browse/branches/xtend2/de.saxsys.roo.equals.addon/pom.xml pom.xml]. You will at least have to add the following lines to your POM:

{{{

<repositories>
	...
		<repository>
			<id>xtext4roo</id>
			<url>http://xtext4roo.googlecode.com/svn/repo</url>
		</repository>
	</repositories>

}}}

