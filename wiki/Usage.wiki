#summary How to use this addon in a Roo managed Java project

<font color="red">TODO explain equals command, update project configuration section</font>

===Project Configuration===
  # You can create a Roo managed project from the Roo shell:
{{{
project --topLevelPackage com.example.app
}}}
  # In order to use the @!RooEquals annotation you need to add a dependency to your project's pom.xml. The annotation jar file is hosted in the addon's maven repository on Google Code.
{{{
<repositories>
...
  <repository>
    <id>googlecode.rooequals.repo</id>
    <url>https://spring-roo-equals-roo-addon.googlecode.com/svn/maven-repository/</url>
    <releases>
      <enabled>true</enabled>
    </releases>
    <snapshots>
      <enabled>false</enabled>
    </snapshots>
  </repository>
  <repository>
    <id>googlecode.rooequals.snapshotrepo</id>
    <url>https://spring-roo-equals-roo-addon.googlecode.com/svn/maven-snapshot-repository/</url>
    <releases>
      <enabled>false</enabled>
    </releases>
    <snapshots>
      <enabled>true</enabled>
    </snapshots>
  </repository>
</repositories>

<dependencies>
...
  <dependency>
    <groupId>de.saxsys.roo</groupId>
    <artifactId>de.saxsys.roo.equals.annotations</artifactId>
    <version>1.0.0-SNAPSHOT</version>
  </dependency>
  <dependency>
    <groupId>commons-lang</groupId>
    <artifactId>commons-lang</artifactId>
    <version>2.5</version>
  </dependency>
</dependencies>
}}}
Now you are ready to use the @!RooEquals annotation.

===Usage of @!RooEquals===

Annotating a class with @!RooEquals will trigger the creation of the equals() and hashCode() methods into a separate AspectJ file.
The implementation delegates to the [http://commons.apache.org/lang/api-release/org/apache/commons/lang/builder/EqualsBuilder.html EqualsBuilder] and [http://commons.apache.org/lang/api-release/org/apache/commons/lang/builder/HashCodeBuilder.html HashCodeBuilder] provided by the [http://commons.apache.org/lang/ Apache Commons Lang] project.
The determination of equality is based on instance variable comparison. Note that static and transient fields are not taken into account.

Example:

Customer.java
{{{
// imports

@RooEquals
class Customer {
  private int age;
  private String name;
}
}}}
The generated !Customer_Roo_Equals.aj
{{{
// imports

privileged aspect Customer_Roo_Equals {
  public boolean Customer.equals(Object other) {
    if (other == null) { return false; }
    if (other == this) { return true; }
    if (!(other instanceof Customer)) {
      return false;
    }
    Customer rhs = (Customer) other;
    return new EqualsBuilder()
        .append(age, rhs.age)
        .append(name, rhs.name)
        .isEquals();
  }
  public int Customer.hashCode() {
    return new HashCodeBuilder(43, 11)
        .append(age)
        .append(name)
        .toHashCode();
  }
}
}}}

====Configure the generation====

The @!RooEquals annotation provides two attributes which can be used to influence the method generation:

  * `callSuper : boolean = false`
  Setting this attribute to true will include a call to super.equals() and super.hashCode() in the generated methods.
  * `callInstanceOf : boolean = false`
  Setting this attribute to true will create instanceof comparison instead of getClass() in the generated equals() method.